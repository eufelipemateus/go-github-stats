// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/eufelipemateus/go-github-stats/collect-data/models"
)

func newLang(db *gorm.DB, opts ...gen.DOOption) lang {
	_lang := lang{}

	_lang.langDo.UseDB(db, opts...)
	_lang.langDo.UseModel(&models.Lang{})

	tableName := _lang.langDo.TableName()
	_lang.ALL = field.NewAsterisk(tableName)
	_lang.ID = field.NewUint(tableName, "id")
	_lang.CreatedAt = field.NewTime(tableName, "created_at")
	_lang.UpdatedAt = field.NewTime(tableName, "updated_at")
	_lang.Language = field.NewString(tableName, "language")
	_lang.Weight = field.NewInt(tableName, "weight")
	_lang.Percent = field.NewFloat32(tableName, "percent")
	_lang.CollectID = field.NewUint(tableName, "collect_id")
	_lang.Collect = langBelongsToCollect{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Collect", "models.Collect"),
		User: struct {
			field.RelationField
			Following struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Collect.User", "models.User"),
			Following: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Collect.User.Following", "models.Collect"),
			},
		},
		Followers: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Collect.Followers", "models.User"),
		},
	}

	_lang.fillFieldMap()

	return _lang
}

type lang struct {
	langDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	Language  field.String
	Weight    field.Int
	Percent   field.Float32
	CollectID field.Uint
	Collect   langBelongsToCollect

	fieldMap map[string]field.Expr
}

func (l lang) Table(newTableName string) *lang {
	l.langDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lang) As(alias string) *lang {
	l.langDo.DO = *(l.langDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lang) updateTableName(table string) *lang {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.Language = field.NewString(table, "language")
	l.Weight = field.NewInt(table, "weight")
	l.Percent = field.NewFloat32(table, "percent")
	l.CollectID = field.NewUint(table, "collect_id")

	l.fillFieldMap()

	return l
}

func (l *lang) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lang) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 8)
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["language"] = l.Language
	l.fieldMap["weight"] = l.Weight
	l.fieldMap["percent"] = l.Percent
	l.fieldMap["collect_id"] = l.CollectID

}

func (l lang) clone(db *gorm.DB) lang {
	l.langDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lang) replaceDB(db *gorm.DB) lang {
	l.langDo.ReplaceDB(db)
	return l
}

type langBelongsToCollect struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
		Following struct {
			field.RelationField
		}
	}
	Followers struct {
		field.RelationField
	}
}

func (a langBelongsToCollect) Where(conds ...field.Expr) *langBelongsToCollect {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a langBelongsToCollect) WithContext(ctx context.Context) *langBelongsToCollect {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a langBelongsToCollect) Model(m *models.Lang) *langBelongsToCollectTx {
	return &langBelongsToCollectTx{a.db.Model(m).Association(a.Name())}
}

type langBelongsToCollectTx struct{ tx *gorm.Association }

func (a langBelongsToCollectTx) Find() (result *models.Collect, err error) {
	return result, a.tx.Find(&result)
}

func (a langBelongsToCollectTx) Append(values ...*models.Collect) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a langBelongsToCollectTx) Replace(values ...*models.Collect) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a langBelongsToCollectTx) Delete(values ...*models.Collect) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a langBelongsToCollectTx) Clear() error {
	return a.tx.Clear()
}

func (a langBelongsToCollectTx) Count() int64 {
	return a.tx.Count()
}

type langDo struct{ gen.DO }

type ILangDo interface {
	gen.SubQuery
	Debug() ILangDo
	WithContext(ctx context.Context) ILangDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILangDo
	WriteDB() ILangDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILangDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILangDo
	Not(conds ...gen.Condition) ILangDo
	Or(conds ...gen.Condition) ILangDo
	Select(conds ...field.Expr) ILangDo
	Where(conds ...gen.Condition) ILangDo
	Order(conds ...field.Expr) ILangDo
	Distinct(cols ...field.Expr) ILangDo
	Omit(cols ...field.Expr) ILangDo
	Join(table schema.Tabler, on ...field.Expr) ILangDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILangDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILangDo
	Group(cols ...field.Expr) ILangDo
	Having(conds ...gen.Condition) ILangDo
	Limit(limit int) ILangDo
	Offset(offset int) ILangDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILangDo
	Unscoped() ILangDo
	Create(values ...*models.Lang) error
	CreateInBatches(values []*models.Lang, batchSize int) error
	Save(values ...*models.Lang) error
	First() (*models.Lang, error)
	Take() (*models.Lang, error)
	Last() (*models.Lang, error)
	Find() ([]*models.Lang, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Lang, err error)
	FindInBatches(result *[]*models.Lang, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Lang) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILangDo
	Assign(attrs ...field.AssignExpr) ILangDo
	Joins(fields ...field.RelationField) ILangDo
	Preload(fields ...field.RelationField) ILangDo
	FirstOrInit() (*models.Lang, error)
	FirstOrCreate() (*models.Lang, error)
	FindByPage(offset int, limit int) (result []*models.Lang, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILangDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l langDo) Debug() ILangDo {
	return l.withDO(l.DO.Debug())
}

func (l langDo) WithContext(ctx context.Context) ILangDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l langDo) ReadDB() ILangDo {
	return l.Clauses(dbresolver.Read)
}

func (l langDo) WriteDB() ILangDo {
	return l.Clauses(dbresolver.Write)
}

func (l langDo) Session(config *gorm.Session) ILangDo {
	return l.withDO(l.DO.Session(config))
}

func (l langDo) Clauses(conds ...clause.Expression) ILangDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l langDo) Returning(value interface{}, columns ...string) ILangDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l langDo) Not(conds ...gen.Condition) ILangDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l langDo) Or(conds ...gen.Condition) ILangDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l langDo) Select(conds ...field.Expr) ILangDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l langDo) Where(conds ...gen.Condition) ILangDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l langDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILangDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l langDo) Order(conds ...field.Expr) ILangDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l langDo) Distinct(cols ...field.Expr) ILangDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l langDo) Omit(cols ...field.Expr) ILangDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l langDo) Join(table schema.Tabler, on ...field.Expr) ILangDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l langDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILangDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l langDo) RightJoin(table schema.Tabler, on ...field.Expr) ILangDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l langDo) Group(cols ...field.Expr) ILangDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l langDo) Having(conds ...gen.Condition) ILangDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l langDo) Limit(limit int) ILangDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l langDo) Offset(offset int) ILangDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l langDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILangDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l langDo) Unscoped() ILangDo {
	return l.withDO(l.DO.Unscoped())
}

func (l langDo) Create(values ...*models.Lang) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l langDo) CreateInBatches(values []*models.Lang, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l langDo) Save(values ...*models.Lang) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l langDo) First() (*models.Lang, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Lang), nil
	}
}

func (l langDo) Take() (*models.Lang, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Lang), nil
	}
}

func (l langDo) Last() (*models.Lang, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Lang), nil
	}
}

func (l langDo) Find() ([]*models.Lang, error) {
	result, err := l.DO.Find()
	return result.([]*models.Lang), err
}

func (l langDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Lang, err error) {
	buf := make([]*models.Lang, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l langDo) FindInBatches(result *[]*models.Lang, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l langDo) Attrs(attrs ...field.AssignExpr) ILangDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l langDo) Assign(attrs ...field.AssignExpr) ILangDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l langDo) Joins(fields ...field.RelationField) ILangDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l langDo) Preload(fields ...field.RelationField) ILangDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l langDo) FirstOrInit() (*models.Lang, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Lang), nil
	}
}

func (l langDo) FirstOrCreate() (*models.Lang, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Lang), nil
	}
}

func (l langDo) FindByPage(offset int, limit int) (result []*models.Lang, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l langDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l langDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l langDo) Delete(models ...*models.Lang) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *langDo) withDO(do gen.Dao) *langDo {
	l.DO = *do.(*gen.DO)
	return l
}
